[ Set ros_astra_camera dependencies ]
$ # `auto-depth-calibration/src`
$ sudo apt install libgflags-dev  ros-noetic-image-geometry ros-noetic-camera-info-manager ros-noetic-image-transport ros-noetic-image-publisher libgoogle-glog-dev libusb-1.0-0-dev libeigen3-dev
$ git clone https://github.com/libuvc/libuvc.git
$ cd libuvc/
$ sudo rm -rf .git
$ mkdir build && cd build
$ cmake .. && make -j4
$ sudo make install
$ sudo ldconfig

$ # `auto-depth-calibration/src`
$ git clone https://github.com/orbbec/ros_astra_camera.git
$ cd ros_astra_camera/
$ sudo rm -rf .git
$ cd ../../ && catkin_make
$ source devel/setup.bash
$ roscd astra_camera
$ ./scripts/create_udev_rules

# ros_astra_camera/params/camera_params_template.yaml의 color_height, depth_height, ir_height을 480에서 400으로 변경

$ roslaunch astra_camera stereo_s_u3.launch
$ rviz

$ rosnode list
$ rostopic echo /camera/depth/image_raw
$ rostopic info /camera/depth/points


# /camera/depth/points -> sensor_msgs/PointCloud2

# sudo apt-get install -y libpcl-*


[ /camera/depth/camera_info example ]
---
header:
  seq: 1644
  stamp:
    secs: 1667439232
    nsecs: 679175490
  frame_id: "camera_color_optical_frame"
height: 400
width: 640
distortion_model: "plumb_bob"
D: [0.0, 0.0, 0.0, 0.0, 0.0]
K: [453.7543640136719, 0.0, 323.54632568359375, 0.0, 453.7543640136719, 241.92617797851562, 0.0, 0.0, 1.0]
R: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]
P: [453.7543640136719, 0.0, 323.54632568359375, 0.0, 0.0, 453.7543640136719, 241.92617797851562, 0.0, 0.0, 0.0, 1.0, 0.0]
binning_x: 0
binning_y: 0
roi:
  x_offset: 0
  y_offset: 0
  height: 0
  width: 0
  do_rectify: False
---

...

---
header:
  seq: 1674
  stamp:
    secs: 1667439233
    nsecs: 671148498
  frame_id: "camera_color_optical_frame"

height: 400
width: 640

## "plumb_bob" - a simple model of radial and tangential distortion
## For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).

distortion_model: "plumb_bob"
D: [0.0, 0.0, 0.0, 0.0, 0.0]
K: [453.7543640136719, 0.0, 323.54632568359375, 0.0, 453.7543640136719, 241.92617797851562, 0.0, 0.0, 1.0]
R: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]
P: [453.7543640136719, 0.0, 323.54632568359375, 0.0, 0.0, 453.7543640136719, 241.92617797851562, 0.0, 0.0, 0.0, 1.0, 0.0]

## float64[] D
##
## The distortion parameters, size depending on the distortion model.
## For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).

## """ K가 카메라 내부 파라미터임을 상기할 것"""
## float64[9]  K # 3x3 row-major matrix
##
## Intrinsic camera matrix for the raw (distorted) images.
##     [fx  0 cx]
## K = [ 0 fy cy]
##     [ 0  0  1]
## Projects 3D points in the camera coordinate frame to 2D pixel
## coordinates using the focal lengths (fx, fy) and principal point
## (cx, cy).

## float64[9]  R # 3x3 row-major matrix
##
## Rectification matrix (stereo cameras only)
## A rotation matrix aligning the camera coordinate system to the ideal
## stereo image plane so that epipolar lines in both stereo images are
## parallel.

## float64[12] P # 3x4 row-major matrix
##
## Projection/camera matrix
##     [fx'  0  cx' Tx]
## P = [ 0  fy' cy' Ty]
##     [ 0   0   1   0]
## By convention, this matrix specifies the intrinsic (camera) matrix
##  of the processed (rectified) image. That is, the left 3x3 portion
##  is the normal camera intrinsic matrix for the rectified image.
## It projects 3D points in the camera coordinate frame to 2D pixel
##  coordinates using the focal lengths (fx', fy') and principal point
##  (cx', cy') - these may differ from the values in K.
## For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will
##  also have R = the identity and P[1:3,1:3] = K.
## For a stereo pair, the fourth column [Tx Ty 0]' is related to the
##  position of the optical center of the second camera in the first
##  camera's frame. We assume Tz = 0 so both cameras are in the same
##  stereo image plane. The first camera always has Tx = Ty = 0. For
##  the right (second) camera of a horizontal stereo pair, Ty = 0 and
##  Tx = -fx' * B, where B is the baseline between the cameras.
## Given a 3D point [X Y Z]', the projection (x, y) of the point onto
##  the rectified image is given by:
##  [u v w]' = P * [X Y Z 1]'
##         x = u / w
##         y = v / w
##  This holds for both images of a stereo pair.

binning_x: 0
binning_y: 0
roi:
  x_offset: 0
  y_offset: 0
  height: 0
  width: 0
  do_rectify: False
---
